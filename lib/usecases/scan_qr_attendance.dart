import 'package:employeemonitor/repository/employee_repository_impl.dart';
import 'package:geolocator/geolocator.dart';
import '../entities/attendance.dart';
import '../repository/attendance_repository.dart';

class ScanQRAttendanceUseCase {
  final AttendanceRepository _attendanceRepository;

  ScanQRAttendanceUseCase(
    this._attendanceRepository,
    EmployeeRepositoryImpl read,
  );

  Future<AttendanceResult> execute({
    required String employeeId,
    required String qrCodeData,
    required Position position,
  }) async {
    try {
      // Validate QR code
      if (!_isValidQRCode(qrCodeData)) {
        return AttendanceResult.failure('Invalid QR code');
      }

      // Validate location (within 100 meters of office)
      if (!_isValidLocation(position)) {
        return AttendanceResult.failure(
          'You are not within the office premises',
        );
      }

      // Check if already checked in today
      final todayAttendance = await _attendanceRepository.getTodayAttendance(
        employeeId,
      );
      if (todayAttendance != null && todayAttendance.checkInTime != null) {
        return AttendanceResult.failure('You have already checked in today');
      }

      final now = DateTime.now();
      final status = _calculateAttendanceStatus(now);

      final attendance = Attendance(
        id: '', // Will be generated by repository
        employeeId: employeeId,
        date: DateTime(now.year, now.month, now.day),
        checkInTime: now,
        status: status,
        latitude: position.latitude,
        longitude: position.longitude,
        qrCodeData: qrCodeData,
      );

      await _attendanceRepository.recordAttendance(attendance);
      return AttendanceResult.success(attendance);
    } catch (e) {
      return AttendanceResult.failure(
        'Failed to record attendance: ${e.toString()}',
      );
    }
  }

  bool _isValidQRCode(String qrCodeData) {
    // Implement your QR code validation logic
    return qrCodeData.startsWith('OFFICE_QR_');
  }

  bool _isValidLocation(Position position) {
    // Office coordinates (replace with actual coordinates)
    const double officeLatitude = 37.7749;
    const double officeLongitude = -122.4194;
    const double maxDistanceInMeters = 100.0;

    final distance = Geolocator.distanceBetween(
      officeLatitude,
      officeLongitude,
      position.latitude,
      position.longitude,
    );

    return distance <= maxDistanceInMeters;
  }

  AttendanceStatus _calculateAttendanceStatus(DateTime checkInTime) {
    final hour = checkInTime.hour;
    final minute = checkInTime.minute;

    if (hour < 8) {
      return AttendanceStatus.early;
    } else if (hour == 8 && minute == 0) {
      return AttendanceStatus.onTime;
    } else if (hour == 8 && minute <= 20) {
      return AttendanceStatus.late;
    } else {
      return AttendanceStatus.absent;
    }
  }
}

class AttendanceResult {
  final bool isSuccess;
  final String? errorMessage;
  final Attendance? attendance;

  AttendanceResult._(this.isSuccess, this.errorMessage, this.attendance);

  factory AttendanceResult.success(Attendance attendance) {
    return AttendanceResult._(true, null, attendance);
  }

  factory AttendanceResult.failure(String message) {
    return AttendanceResult._(false, message, null);
  }
}
